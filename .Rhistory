Sys.sleep(0.210)
}
}
return(tibble::as_tibble(table))
}
getpbf_mun("3304557", 2017, TRUE)
styler:::style_active_file()
getpbf_mun <- function(IBGECODE, AAAA, MM = NULL, PAGE = 1, YEARLY = TRUE) {
# Mensagens de erro para evitar que o usuário insira valores que não podem ser requisitados.
if (AAAA < 2003) {
stop("Invalid Input: Program Bolsa Familia was created in 2003, so AAAA cannot be < 2003")
}
if (AAAA < 2012) {
stop("The requested time period data might not be availible!")
}
if (is.null(MM) != TRUE) {
if (MM > 12) {
stop("Invalid Input: The MM (Months) argument cannot be > 12!")
}
}
# Mensagem de erro para evitar a requisição anual com o argumento (Mês) preenchido.
if (YEARLY == TRUE) {
if (is.null(MM) == FALSE) {
stop("Yearly requests do not accept the MM argument")
}
}
# Convertendo os valores em string para numéricos.
AAAAMM <- paste(AAAA, MM, sep = "")
IBGECODEN <- as.numeric(IBGECODE)
PAGEN <- as.numeric(PAGE)
# URL da API
path <- "http://api.portaldatransparencia.gov.br"
# Cria um vetor vazio, este alocará uma tabela.
table <- c()
# loop para requerer os dados de cada municipio inserido; Requisição de um Mês específico.
if (YEARLY == FALSE) {
for (i in IBGECODE) { # API Request Code
request <- httr::GET(
url = path,
query = list(
mesAno = AAAAMM,
codigoIbge = i,
pagina = PAGEN
)
)
#  if (request$status_code != 200) {
#  stop(warning("Request Failed: Status Code "), request$status_code) # In case of error, what to show?
# }
# Transforma a resposta da API em texto, e então coloca-a em um DF, que depois é transformado em tibble.
resp <- httr::content(request, as = "text", encoding = "UTF-8")
newRow <- data.frame(jsonlite::fromJSON(resp, flatten = TRUE))
table <- dplyr::bind_rows(table, newRow)
table <- tibble::as_tibble(table)
}
} else
# Caso sejam feitas requisições de todos os meses de um ano, loop MM= 1 (janeiro) até 12 (dezembro).
if (YEARLY == TRUE) {
MX <- as.character(c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")) # Quantity of Months
anos <- AAAA
for (i in MX) {
data <- getpbf_mun(IBGECODEN, anos, i, PAGEN, FALSE) # Recursion to avoid !DRY
table <- dplyr::bind_rows(table, data)
Sys.sleep(0.210)
}
}
return(tibble::as_tibble(table))
}
getpbf_mun("3304557", 2017, TRUE)
getpbf_mun <- function(IBGECODE, AAAA, MM = NULL, PAGE = 1, YEARLY = TRUE) {
# Mensagens de erro para evitar que o usuário insira valores que não podem ser requisitados.
if (AAAA < 2003) {
stop("Invalid Input: Program Bolsa Familia was created in 2003, so AAAA cannot be < 2003")
}
if (AAAA < 2012) {
stop("The requested time period data might not be availible!")
}
if (is.null(MM) != TRUE) {
if (MM > 12) {
stop("Invalid Input: The MM (Months) argument cannot be > 12!")
}
}
if (YEARLY == TRUE) {
if (is.null(MM) == FALSE) {
stop("Yearly requests do not accept the MM argument")
}
}
# Convertendo os valores em string para numéricos.
AAAAMM <- paste(AAAA, MM, sep = "")
IBGECODEN <- as.numeric(IBGECODE)
PAGEN <- as.numeric(PAGE)
# URL da API
path <- "http://api.portaldatransparencia.gov.br"
# Cria um vetor vazio, este alocará uma tabela.
table <- c()
# loop para requerer os dados de cada municipio inserido; Requisição de um Mês específico.
if (YEARLY == FALSE) {
for (i in IBGECODE) { # API Request Code
request <- httr::GET(
url = path,
query = list(
mesAno = AAAAMM,
codigoIbge = i,
pagina = PAGEN
)
)
#  if (request$status_code != 200) {
#  stop(warning("Request Failed: Status Code "), request$status_code) # In case of error, what to show?
# }
# Transforma a resposta da API em texto, e então coloca-a em um DF, que depois é transformado em tibble.
resp <- httr::content(request, as = "text", encoding = "UTF-8")
newRow <- data.frame(jsonlite::fromJSON(resp, flatten = TRUE))
table <- dplyr::bind_rows(table, newRow)
table <- tibble::as_tibble(table)
}
} else
# Caso sejam feitas requisições de todos os meses de um ano, loop MM= 1 (janeiro) até 12 (dezembro).
if (YEARLY == TRUE) {
MX <- as.character(c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")) # Quantity of Months
anos <- AAAA
for (i in MX) {
data <- getpbf_mun(IBGECODEN, anos, i, PAGEN, FALSE) # Recursion to avoid !DRY
table <- dplyr::bind_rows(table, data)
Sys.sleep(0.210)
}
}
return(tibble::as_tibble(table))
}
getpbf_mun("3304557", 2017, TRUE)
styler:::style_active_file()
getpbf_mun <- function(IBGECODE, AAAA, MM = NULL, PAGE = 1, YEARLY = TRUE) {
# Mensagens de erro para evitar que o usuário insira valores que não podem ser requisitados.
if (AAAA < 2003) {
stop("Invalid Input: Program Bolsa Familia was created in 2003, so AAAA cannot be < 2003")
}
if (AAAA < 2012) {
stop("The requested time period data might not be availible!")
}
if (is.null(MM) != TRUE) {
if (MM > 12) {
stop("Invalid Input: The MM (Months) argument cannot be > 12!")
}
}
# if (YEARLY == TRUE) {
#    if (is.null(MM) == FALSE) {
#     stop("Yearly requests do not accept the MM argument")
#  }
# }
# Convertendo os valores em string para numéricos.
AAAAMM <- paste(AAAA, MM, sep = "")
IBGECODEN <- as.numeric(IBGECODE)
PAGEN <- as.numeric(PAGE)
# URL da API
path <- "http://api.portaldatransparencia.gov.br"
# Cria um vetor vazio, este alocará uma tabela.
table <- c()
# loop para requerer os dados de cada municipio inserido; Requisição de um Mês específico.
if (YEARLY == FALSE) {
for (i in IBGECODE) { # API Request Code
request <- httr::GET(
url = path,
query = list(
mesAno = AAAAMM,
codigoIbge = i,
pagina = PAGEN
)
)
#  if (request$status_code != 200) {
#  stop(warning("Request Failed: Status Code "), request$status_code) # In case of error, what to show?
# }
# Transforma a resposta da API em texto, e então coloca-a em um DF, que depois é transformado em tibble.
resp <- httr::content(request, as = "text", encoding = "UTF-8")
newRow <- data.frame(jsonlite::fromJSON(resp, flatten = TRUE))
table <- dplyr::bind_rows(table, newRow)
table <- tibble::as_tibble(table)
}
} else
# Caso sejam feitas requisições de todos os meses de um ano, loop MM= 1 (janeiro) até 12 (dezembro).
if (YEARLY == TRUE) {
MX <- as.character(c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")) # Quantity of Months
anos <- AAAA
for (i in MX) {
data <- getpbf_mun(IBGECODEN, anos, i, PAGEN, FALSE) # Recursion to avoid !DRY
table <- dplyr::bind_rows(table, data)
Sys.sleep(0.210)
}
}
return(tibble::as_tibble(table))
}
getpbf_mun("3304557", 2017, TRUE)
citation(Recon)
library(Recon)
install.packages('Recon')
citation(Recon)
citation('Recon')
citation('owdbr')
devtools::install_github("cloudyr/RoogleVision")
library(RoogleVision)
setwd("~/Documents/TidyLula/rooglevis")
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = cbind(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'), id = i)
tabela = dplyr::bind_rows(resposta, tabv)
}
return(tabela)
}
teste(getwd())
options("googleAuthR.client_id" = "979503932696-kpotshnkulne0r3n7d0lnnagkndcga94.apps.googleusercontent.com")
options("googleAuthR.client_secret" = "-Dvil-LpP842U2HxxaEhN7Pt")
install.packages('googleAuthR')
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/cloud-platform"))
googleAuthR::gar_auth()
teste(getwd())
teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = cbind(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'), id = i)
#tabela = dplyr::bind_rows(resposta, tabv)
}
return(resposta)
}
teste(getwd())
df <- teste(getwd())
View(df)
View(df[[2]][[1]])
View(df[[1]][[1]])
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = cbind(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'), id = i)
#tabela = dplyr::bind_rows(resposta, tabv)
tabela = cbind(resposta, tabv)
}
return(tabela)
}
df <- teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = cbind(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'), id = i)
#tabela = dplyr::bind_rows(resposta, tabv)
tabela = merge(resposta, tabv)
}
return(tabela)
}
df <- teste(getwd())
View(df)
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = cbind(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'), id = i)
#tabela = dplyr::bind_rows(resposta, tabv)
tabela = merge.data.frame(resposta, tabv)
}
return(tabela)
}
rm(df)
df <- teste(getwd())
View(df)
library(dplyr)
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = cbind(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'), id = i)
#tabela = dplyr::bind_rows(resposta, tabv)
}
return(resposta)
}
df <- teste(getwd())
df2 <- teste(getwd())
bind_rows(df, df2)
typeof(df)
typeof(df) %>% tibble()
d <- df %>% tibble()
View(d)
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = cbind(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'), id = i)
tabela = dplyr::bind_rows(as_tibble(resposta), tabv)
}
return(resposta)
}
df <- teste(getwd())
typeof(d)
d <- df %>% as_tibble()
typeof(d)
typeof(d)
View(d)
View(d[[3]][[1]])
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = cbind(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'), id = i)
resposta = as_tibble(resposta)
tabela = dplyr::bind_rows(as_tibble(resposta), tabv)
}
return(tabela)
}
df <- teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
resposta = as_tibble(resposta)
tabela = dplyr::bind_rows(as_tibble(resposta), tabv)
}
return(tabela)
}
df <- teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
resposta = as_tibble(resposta)
#tabela = dplyr::bind_rows(as_tibble(resposta), tabv)
}
return(tabela)
}
df <- teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
resposta = as_tibble(resposta)
#tabela = dplyr::bind_rows(as_tibble(resposta), tabv)
}
return(tabela)
}
df <- teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
resposta = as_tibble(resposta)
#tabela = dplyr::bind_rows(as_tibble(resposta), tabv)
}
return(resposta)
}
df <- teste(getwd())
View(df)
rm(list=ls())
options("googleAuthR.client_id" = "979503932696-kpotshnkulne0r3n7d0lnnagkndcga94.apps.googleusercontent.com")
options("googleAuthR.client_secret" = "-Dvil-LpP842U2HxxaEhN7Pt")
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/cloud-platform"))
googleAuthR::gar_auth()
library(dplyr)
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
resposta = as_tibble(resposta)
#tabela = dplyr::bind_rows(as_tibble(resposta), tabv)
}
return(resposta)
}
df <- teste(getwd())
View(df)
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
resposta = as_tibble(resposta)
tabela = dplyr::bind_rows(as_tibble(resposta), tabv)
}
return(resposta)
}
df <- teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
t <- c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
tabela = do.call(cbind, resposta, tabv)
}
return(tabela)
}
df <- teste(getwd())
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
tabela = cbind(tabela, tabv)
}
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
t <- c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
tabela = cbind(tabela, tabv)
}
return(tabela)
}
df <- teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
t <- c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
print(resposta)
}
return('a')
}
df <- teste(getwd())
googleAuthR::gar_auth()
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
t <- c()
for(i in files){
resposta = getGoogleVisionResponse(i, feature = 'FACE_DETECTION')
print(resposta)
}
return('a')
}
df <- teste(getwd())
teste <- function(workdir){
files <- list.files(workdir)
filesloc <- paste(workdir, files, sep='/')
tabv = c()
t <- c()
for(i in files){
resposta = as_tibble(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'))
}
return(resposta)
}
df <- teste(getwd())
d <- df %>% as_tibble()
typeof(d)
d <- df %>% data.frame()
typeof(d)
?lapply
a <- getwd()
files <- list.files(a)
tx <- function(lis){
resposta = as_tibble(getGoogleVisionResponse(i, feature = 'FACE_DETECTION'))
return(resposta)
}
k <- lapply(files, tx())
tx <- function(lis){
resposta = as_tibble(getGoogleVisionResponse(lis, feature = 'FACE_DETECTION'))
return(resposta)
}
k <- lapply(files, tx())
k <- lapply(files, tx)
k <- lapply(files, tx)
View(k)
bind_rows(k[1], k[2])
View(k)
k %>% as_tibble()
k %>% data.frame()
a <- k %>% data.frame()
View(a)
View(a[[1]][[1]])
k[1]
146887400/7486501
349342300/44487867
install.packages('ipeadatar')
install.packages(ipeadatar)
install.packages('ipeadatar')
update()
if(!require(installr)) {
install.packages("installr"); require(installr)}
install.packages('installr')
install.packages('ipeadatar')
source("http://bioconductor.org/biocLite.R")
install.packages(c("dplyr", "tibble"))
install.packages('googleAuthR')
install.packages('httr', 'jsonlite')
install.packages(c('httr', 'jsonlite'))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
install.packages('broom')
install.packages('tidyverse')
install.packages("data.table")
install.packages('roxygen2')
library(owdbr)
